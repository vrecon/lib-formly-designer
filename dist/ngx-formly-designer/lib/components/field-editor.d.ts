import { ElementRef, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { FormlyFieldConfig } from '@ngx-formly/core';
import { FieldsService, FormlyDesignerConfig } from '..';
import * as i0 from "@angular/core";
export declare class FieldEditorComponent implements ControlValueAccessor, OnDestroy, OnInit {
    private fieldsService;
    private fb;
    formlyDesignerConfig: FormlyDesignerConfig;
    fieldGroup: boolean;
    showType: boolean;
    showWrappers: boolean;
    hasContent: boolean;
    blockElRef?: ElementRef;
    private readonly subscriptions;
    private valueChangesSubscription?;
    constructor(fieldsService: FieldsService, fb: FormBuilder, formlyDesignerConfig: FormlyDesignerConfig);
    readonly form: FormGroup;
    readonly key: FormControl;
    readonly className: FormControl;
    readonly fieldGroupClassName: FormControl;
    readonly type: FormControl;
    fieldForm: FormGroup;
    field: FormlyFieldConfig;
    fields: FormlyFieldConfig[];
    fieldArray: boolean;
    invalid: boolean;
    protected onChange: (_: any) => void;
    protected onTouched: () => void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    private subscribeValueChanges;
    private updateField;
    private updateValue;
    private onTypeChange;
    onWrappersSelected(field: FormlyFieldConfig): void;
    private validator;
    static ɵfac: i0.ɵɵFactoryDeclaration<FieldEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FieldEditorComponent, "formly-designer-field-editor", never, { "fieldGroup": "fieldGroup"; "showType": "showType"; "showWrappers": "showWrappers"; "hasContent": "hasContent"; }, {}, never, ["*"]>;
}

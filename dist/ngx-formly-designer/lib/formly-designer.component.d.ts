import { EventEmitter, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { FormlyFieldConfig } from '@ngx-formly/core';
import { Observable } from 'rxjs';
import { DragDropService, FieldsService, FormlyDesignerService } from './';
import { ParentService } from './parent.service';
import * as i0 from "@angular/core";
export declare class FormlyDesignerComponent implements OnDestroy, OnInit {
    private dragDropService;
    private fieldsService;
    private formBuilder;
    formlyDesignerService: FormlyDesignerService;
    private parentService;
    formlyFormContainer?: ViewContainerRef;
    fieldsChange: EventEmitter<FormlyFieldConfig[]>;
    modelChange: EventEmitter<any>;
    types: string[];
    wrappers: string[];
    properties: string[];
    debugFields: FormlyFieldConfig[];
    isDragging$: Observable<boolean>;
    dropTargetCounter: number;
    form: FormGroup;
    options: any;
    get designerId(): string;
    private readonly subscriptions;
    constructor(dragDropService: DragDropService, fieldsService: FieldsService, formBuilder: FormBuilder, formlyDesignerService: FormlyDesignerService, parentService: ParentService);
    get disabled(): boolean;
    set disabled(value: boolean);
    get fields(): FormlyFieldConfig[];
    set fields(value: FormlyFieldConfig[]);
    get model(): any;
    set model(value: any);
    ngOnInit(): void;
    ngOnDestroy(): void;
    onFieldSelected(field: FormlyFieldConfig): void;
    onDragEnter(event: DragEvent): void;
    onDragLeave(): void;
    onDragOver(event: DragEvent): void;
    onDrop(event: DragEvent): void;
    addChildField(field: FormlyFieldConfig, index?: number): void;
    addChildType(type: string, index?: number): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FormlyDesignerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FormlyDesignerComponent, "formly-designer", never, { "disabled": "disabled"; "fields": "fields"; "model": "model"; }, { "fieldsChange": "fieldsChange"; "modelChange": "modelChange"; }, never, never>;
}

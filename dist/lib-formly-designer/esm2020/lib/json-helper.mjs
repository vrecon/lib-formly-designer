import { cloneDeep, isArray, isObject } from './util';
export function decycle(value) {
    if (value == null) {
        return value;
    }
    let nextId = 1;
    const objects = new Map();
    return traverse(cloneDeep(value), (_key, v) => {
        if (isObject(v)) {
            if (objects.has(v)) {
                let id = objects.get(v);
                if (!id) {
                    v.$id = id = nextId++;
                    objects.set(v, id);
                }
                return { $ref: id };
            }
            else {
                objects.set(v, 0);
            }
        }
        return;
    });
}
function traverse(obj, replace) {
    if (isArray(obj)) {
        for (let i = 0; i < obj.length; i++) {
            traverseValue.bind(obj, i, obj[i], replace)();
        }
    }
    else if (isObject(obj)) {
        for (const key in obj) {
            if (obj.hasOwnProperty(key)) {
                traverseValue.bind(obj, key, obj[key], replace)();
            }
        }
    }
    return obj;
}
function traverseValue(key, value, replace) {
    const replacement = replace(key, value);
    if (replacement === undefined) {
        traverse(value, replace);
    }
    else if (this) {
        this[key] = replacement;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9saWItZm9ybWx5LWRlc2lnbmVyL3NyYy9saWIvanNvbi1oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXRELE1BQU0sVUFBVSxPQUFPLENBQUksS0FBUTtJQUNqQyxJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7UUFDakIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNmLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxFQUFlLENBQUM7SUFDdkMsT0FBTyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2YsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNsQixJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixJQUFJLENBQUMsRUFBRSxFQUFFO29CQUNQLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDO29CQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztpQkFDcEI7Z0JBQ0QsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQzthQUNyQjtpQkFBTTtnQkFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNuQjtTQUNGO1FBQ0QsT0FBTztJQUNULENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFJLEdBQU0sRUFBRSxPQUF5QztJQUNwRSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNoQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUksR0FBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbEQsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDO1NBQy9DO0tBQ0Y7U0FBTSxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUN4QixLQUFLLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBRTtZQUNyQixJQUFLLEdBQWMsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3ZDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQzthQUNuRDtTQUNGO0tBQ0Y7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBWSxHQUFXLEVBQUUsS0FBVSxFQUFFLE9BQXlDO0lBQ2xHLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEMsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO1FBQzdCLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDMUI7U0FBTSxJQUFJLElBQUksRUFBRTtRQUNmLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUM7S0FDekI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVEZWVwLCBpc0FycmF5LCBpc09iamVjdCB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWN5Y2xlPFQ+KHZhbHVlOiBUKTogVCB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgbGV0IG5leHRJZCA9IDE7XG4gIGNvbnN0IG9iamVjdHMgPSBuZXcgTWFwPGFueSwgbnVtYmVyPigpO1xuICByZXR1cm4gdHJhdmVyc2UoY2xvbmVEZWVwKHZhbHVlKSwgKF9rZXksIHYpID0+IHtcbiAgICBpZiAoaXNPYmplY3QodikpIHtcbiAgICAgIGlmIChvYmplY3RzLmhhcyh2KSkge1xuICAgICAgICBsZXQgaWQgPSBvYmplY3RzLmdldCh2KTtcbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgIHYuJGlkID0gaWQgPSBuZXh0SWQrKztcbiAgICAgICAgICBvYmplY3RzLnNldCh2LCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgJHJlZjogaWQgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdHMuc2V0KHYsIDApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0cmF2ZXJzZTxUPihvYmo6IFQsIHJlcGxhY2U6IChrZXk6IHN0cmluZywgdmFsdWU6IGFueSkgPT4gYW55KTogVCB7XG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IChvYmogYXMgdW5rbm93bltdKS5sZW5ndGg7IGkrKykge1xuICAgICAgdHJhdmVyc2VWYWx1ZS5iaW5kKG9iaiwgaSwgb2JqW2ldLCByZXBsYWNlKSgpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChvYmopKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoKG9iaiBhcyBPYmplY3QpLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdHJhdmVyc2VWYWx1ZS5iaW5kKG9iaiwga2V5LCBvYmpba2V5XSwgcmVwbGFjZSkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gdHJhdmVyc2VWYWx1ZSh0aGlzOiBhbnksIGtleTogc3RyaW5nLCB2YWx1ZTogYW55LCByZXBsYWNlOiAoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IGFueSk6IHZvaWQge1xuICBjb25zdCByZXBsYWNlbWVudCA9IHJlcGxhY2Uoa2V5LCB2YWx1ZSk7XG4gIGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdHJhdmVyc2UodmFsdWUsIHJlcGxhY2UpO1xuICB9IGVsc2UgaWYgKHRoaXMpIHtcbiAgICB0aGlzW2tleV0gPSByZXBsYWNlbWVudDtcbiAgfVxufVxuIl19